-- Haskell Playground 1.0
-- Understanding Folds (PDF page 398)
-- (1)
foldr (*) 1 [1..5]
-- flip (*) 1 [1..5]
foldl (flip (*)) 1 [1..5]
foldl (*) 1 [1..5]

-- (2)
fm = flip (*)
foldl (flip (*)) 1 [1..3]
(1 `fm` foldl fm 1 [2, 3])
(1 `fm` (2 `fm` foldl fm 1 [3]))
(1 `fm` (2 `fm` (3 `fm` foldl fm 1 [])))
(1 `fm` (2 `fm` (3 `fm` 1)))
(1 `fm` (2 `fm` (1 * 3)))
(1 `fm` (2 `fm` 3))
6

-- (5)
foldr (++) [] ["woot", "WOOT", "woot"]
foldr max [] ["fear is the little death"]
foldr (&&) True [False, True]
foldr (||) True [False, True]
foldl ((++) . show) "" [1..5]
foldl const 'a' [1..5]
foldr const '0' "tacos"
foldl (flip const) '0' "burritos"
foldl (flip const) 'z' [1..5]


-- Database Processing (PDF page 403)
filterDbDate theDatabase
filterDbNumber theDatabase
mostRecent theDatabase
sumDb theDatabase
avgDb theDatabase


-- Scans Exercises (PDF page 411)
fibs20
fibsLt100


-- Chapter Exercises (PDF page 411)
combinations stops vowels
comb
nvTuples
seekritFunc "hi there whats up"


myAny even [1, 3, 5]
myAny odd [1, 3, 5]
myReverse [1..10]
myMap (+1) [1..10]
squishMap (\x -> [1..x]) [1..5]
squishAgain [[1,2],[2,3]]
myMaximumBy (\_ _ -> GT) [1..10]
myMaximumBy (\_ _ -> LT) [1..10]
myMaximumBy compare [1,3,5,10,3,2,3,6]

myMinimumBy (\_ _ -> GT) [1..10]
myMinimumBy (\_ _ -> LT) [1..10]
myMinimumBy compare [3,5,10,3,2,3,6]


